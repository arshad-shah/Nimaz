@startuml

class Coordinates{
- latitude: Double
- longitude: Double
+<<constructor>> Coordinates(latitude, longitude)
+getLatitude(): Double
+getLongitude(): Double
+setLatitude(latitude: Double)
+setLongitude(longitude: Double)
}

object DoubleUtils{
+closestAngle(angle: Double): Double
+normalizeAngle(angle: Double): Double
+unwindAngle(angle: Double): Double
}

class CalenderUtils{
-<<instantiate>> calender: Calendar
+isLeapYear(year: Int): Boolean
+roundedMinute(date: Date): Date
+add(dateToBeAddedTo: Date, amount: Int, field: Int): Date
+resolveTime(year: Int, month: Int, day: Int): Date
+day(date: Date): Int
+month(date: Date): Int
+year(date: Date): Int
+hour(date: Date): Int
+minute(date: Date): Int
+second(date: Date): Int
+dayOfYear(date: Date): Int
}

object JulianUtils{
+calculateJulianDay(year: Int, month: Int, day: Int): Double
+calculateJulianCentury(julianDay: Double): Double
}

class TimeUtils{
+<<constructor>> TimeUtils(private val hours: Int,private val minutes: Int,private val seconds: Int)
+date(date: Date): Date
}
object TimeUtilsCompanion{
+fromDouble(double: Double): TimeUtils
}
TimeUtils +-- TimeUtilsCompanion : create
@enduml