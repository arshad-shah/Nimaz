@startuml
'https://plantuml.com/sequence-diagram

title Prayer Times
autonumber

'the main system consists of the ui, viewmodel, repository, httpclient, datasource
actor User as user
participant "UI" as ui
participant "ViewModel" as vm
participant "Repository" as repo
participant "Local DataSource" as lds
participant "HttpClient" as http
participant "Remote DataSource" as ds


'the view model has state that is updated by change to the data it has from repository
user -> ui: showPrayerTimes
ui -> vm: getPrayerTimes()
vm --> ui: setStateToLoading()
ui --> user: showLoadingSkeleton()

vm -> repo: getPrayerTimes()
'repo checks if local data is available
repo -> lds: arePrayerTimesAvailable()
lds --> repo: true/false
'if local data is available, the repo asks the local data source for the data
alt local data is available
repo -> lds: getPrayerTimes(today: LocalDateTime)
lds --> repo: PrayerTimes
else local data is not available
'repo asks the http client to get the data from the remote data source
repo -> repo: getMapOfParameters()
repo -> http: getPrayerTimes(params: Map<String,String>)

'now http makes a post resquest to the datasource
http -> ds: getPrayerTimes(POST params)

'request comes back
ds --> http: JSONOBJECT(PrayerTimes)
'now http parses the json object into a model
http -> http: Serialize prayer times to model
http -> repo: List<PrayerTimes>

'now the repo saves the data to the local data source
repo -> lds: savePrayerTimes(List<PrayerTimes>)
end

repo --> vm: PrayerTimes

'now the view model updates the state and in turn triggers the UI recomposition
vm --> ui: setStateToPrayerTimes()
ui --> user: showPrayerTimes()
@enduml