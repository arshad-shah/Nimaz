plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.serialization
    alias libs.plugins.google.services
    alias libs.plugins.firebase.crashlytics
    alias libs.plugins.firebase.perf
    alias libs.plugins.ksp
    alias libs.plugins.about.libs.plugin
    alias libs.plugins.hilt
}

apply plugin: 'com.mikepenz.aboutlibraries.plugin'

android {
    namespace 'com.arshadshah.nimaz'
    compileSdk 35

    defaultConfig {
        applicationId 'com.arshadshah.nimaz'
        minSdk 28
        targetSdk 35
        versionCode 185
        versionName '2.6.12'

        testInstrumentationRunner "com.arshadshah.nimaz.HiltTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField "String", "DO_ACCESS_KEY", "\"${getSecret("DO_ACCESS_KEY")}\""
        buildConfigField "String", "DO_SECRET_KEY", "\"${getSecret("DO_SECRET_KEY")}\""
        buildConfigField "String", "SPACE_NAME", "\"quran-audio\""
        buildConfigField "String", "METAL_API_KEY", "\"${getSecret("METAL_API_KEY")}\""
    }

    signingConfigs {
        release {
            storeFile System.getenv("KEYSTORE_FILE") != null ? file(System.getenv("KEYSTORE_FILE")) : file('keystore.jks')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            ndk {
                debugSymbolLevel 'FULL'
            }
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
        buildConfig = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.10"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            pickFirst '**'
        }
    }

    ksp {
        arg("room.schemaLocation", "$projectDir/schemas")
    }
}

def getSecret(String key) {
    def secretsFile = rootProject.file("secrets.properties")
    if (secretsFile.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(secretsFile))
        return props.getProperty(key)
    }
    return ""
}

dependencies {
    implementation libs.androidx.appcompat
    implementation libs.androidx.ui.test.junit4.android
    implementation libs.androidx.ui.text.google.fonts
    coreLibraryDesugaring libs.desugar.jdk.libs
    implementation libs.androidx.monitor
    implementation libs.androidx.junit.ktx
    implementation libs.androidx.runner

    //navigation testing
    androidTestImplementation libs.androidx.navigation.testing

    implementation libs.androidx.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.core.splashscreen

    implementation platform(libs.firebase.bom)
    implementation libs.firebase.crashlytics.ktx
    implementation libs.firebase.analytics.ktx
    implementation libs.firebase.perf.ktx
    implementation libs.firebase.crashlytics.buildtools

    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.activity.compose
    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.ui.tooling.preview
    implementation libs.androidx.compose.ui.graphics
    implementation libs.androidx.compose.material3
    implementation libs.androidx.material.icons.extended

    //testing
    debugImplementation libs.androidx.compose.ui.tooling
    debugImplementation libs.androidx.compose.ui.test.manifest

    //navigation compose
    implementation libs.androidx.navigation.compose

    implementation libs.play.services.location


    implementation libs.toasty

    //room
    implementation libs.room.runtime
    annotationProcessor libs.room.compiler
    ksp libs.room.compiler
    implementation libs.room.ktx

    //accompanist permissions
    implementation libs.accompanist.permissions

    implementation libs.app.update
    implementation libs.app.update.ktx

    implementation libs.gson

    //calendar
    implementation libs.calendar

    //Add AWS S3 SDK
    implementation libs.aws.android.sdk.s3

    // Open Source Libraries Screen.
    implementation libs.aboutlibraries.core.v1083
    implementation libs.aboutlibraries.compose.v1083

    implementation libs.markwon.core
    implementation libs.markwon.ext.strikethrough
    implementation libs.markwon.ext.tables
    implementation libs.markwon.html
    implementation libs.markwon.linkify

    //org.slf4j.impl.StaticLoggerBinder
    implementation libs.slf4j.android

    implementation(libs.app.review)
    implementation(libs.app.review.ktx)

    implementation libs.baloon

    implementation libs.glance.appwidget
    implementation libs.glance.material3
    implementation libs.work.manager
    //kotlinx date time
    implementation libs.kotlinx.datetime

    implementation libs.hilt.android
    ksp libs.hilt.android.compiler
    implementation libs.androidx.hilt.navigation.compose
    implementation libs.androidx.hilt.work

    //ktor
    // Ktor client
    implementation(libs.ktor.client.android)
    implementation(libs.ktor.client.core)
    implementation(libs.ktor.client.content.negotiation)
    implementation(libs.ktor.serialization.kotlinx.json)


    //testing
    testImplementation libs.ktor.client.mock

    testImplementation libs.junit
    testImplementation libs.mockito.core
    testImplementation libs.kotlinx.coroutines.test


    testImplementation libs.dagger.hilt.android.testing
    kspTest libs.hilt.android.compiler
    androidTestImplementation libs.dagger.hilt.android.testing
    kspAndroidTest libs.hilt.android.compiler
    testImplementation libs.mockito.kotlin
    testImplementation libs.junit
    //mockito
    testImplementation libs.mockito.core
    //Robolectric environment
    testImplementation libs.androidx.core
    testImplementation libs.robolectric
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    testImplementation libs.junit.jupiter


    implementation libs.introshowcaseview


    testImplementation libs.mockito.core
    // Optional -- mockito-kotlin
    testImplementation libs.mockito.kotlin


}
